#!/usr/local/bin/python3
# maxim
import uuid

import networkx
import matplotlib.pyplot as plt

if __name__ == '__main__':

    # states = ['L-L-L', 'M-I-I', 'S-S-S', 'O-M-M', 'M-O-M', 'O-O-O', 'O-O-M', 'T-O-O', 'L-O-O', 'S-O-O', 'I-M-M', 'I-I-M', 'T-T-T', 'M-M-O', 'M-O-O', 'L-L-O', 'M-M-I', 'M-I-M', 'I-I-I', 'M-M-M', 'S-S-O', 'T-T-O']
    states = ['W', 'C', 'Y', 'F', 'I', 'M', 'A', 'T', 'R', 'V', 'P', 'G', 'L', 'Q', 'D', 'N', 'H', 'K', 'E', 'S']

    emission_probabilities = [
        [0.004783969715444531, 0.006985765013776406, 0.007517232844408237, 0.0390256828032954, 0.029762957755140623, 0.04730139616599107, 0.21053794414576799, 0.06286581120592329, 0.08564300394728751, 0.052388302544895744, 0.04175894593225911, 0.08533930804406932, 0.10538323765646983, 0.025207519206867778, 0.01996876487635401, 0.023613115714972283, 0.011768975489462891, 0.03522948401306804, 0.021715016319858598, 0.08321343672154198],
        [0.006568851121832064, 0.01238093683656136, 0.013615009830784706, 0.053861712964971824, 0.0758361740234004, 0.07320879280989263, 0.12977710651284013, 0.050477964432423944, 0.04128213018514677, 0.07420401296652436, 0.019387286739248732, 0.064092576175146, 0.20720523469878863, 0.008519482628830252, 0.0025879704953051482, 0.014411185956090089, 0.006688277540627871, 0.06855116247685615, 0.002150073626387187, 0.0751992331231561],
        [0.009465440179379057, 0.01576337650494591, 0.024182852949595872, 0.03476338597654818, 0.04362989241136584, 0.030317783864383347, 0.07324624670471287, 0.052513687298841906, 0.06218534167175163, 0.05697534297418956, 0.05859181329775172, 0.06407348767994608, 0.08667196508345067, 0.04271854397837205, 0.05138376342866668, 0.043316230484563095, 0.02210576885163441, 0.06531331671344984, 0.06882534238206006, 0.09395657810002299],
        [0.014400498044421515, 0.0310904435717474, 0.03558065568030288, 0.03409014822699466, 0.04157539255363969, 0.017470289257034366, 0.07841755954215161, 0.06390496973031674, 0.041533340619220344, 0.06160145821156767, 0.06211542629891533, 0.0775578311051337, 0.06967542962008366, 0.0491914651207005, 0.05711124610301219, 0.04712624789699444, 0.019002848644761938, 0.060405314299194934, 0.05922786013545302, 0.07892218275518387],
        [0.016623682995548335, 0.025500478478929976, 0.00918813843935781, 0.04700459742667923, 0.0454978350937067, 0.06426685285008191, 0.1463690221456394, 0.05254031121520874, 0.03298515658945656, 0.08401854169317832, 0.03454105247676516, 0.062186865716521995, 0.2097021736848217, 0.01857264731754541, 0.006960750642789724, 0.013004177826125195, 0.009892386051508014, 0.03208437475996211, 0.012037884590849333, 0.07702519912601234],
        [0.02431371433544399, 0.019640669979110136, 0.03498044601837996, 0.09088766509306977, 0.10985074364051149, 0.028885170770987977, 0.10612585321154973, 0.051234513344758585, 0.008499861332488121, 0.11455765063710864, 0.023060796645702302, 0.07453200984590128, 0.1992481139355939, 0.01076865823012847, 0.0079580590882755, 0.016254405952781256, 0.007890333807748923, 0.007991921728538789, 0.007585570045379323, 0.05573824449977599]
    ]

    Graph = networkx.Graph()

    for i, vec in enumerate(emission_probabilities):
        for j, element in enumerate(vec):
            print(states[i], states[j], element)
            Graph.add_edge(states[i], states[j], weight=element)

    print(Graph)

    edges, weights = zip(*networkx.get_edge_attributes(Graph, 'weight').items())

    networkx.draw_circular(Graph, with_labels=True, edgelist=edges, edge_color=weights, width=2.0, edge_cmap=plt.get_cmap('Blues'), node_size=800)

    # plt.show()

    path = "saved_output_and_evaluation/graphs/" + str(uuid.uuid4()) + ".png"
    plt.savefig(path, dpi=350)
    print("saved to ", path)
